import {
  DataProvider,
  fetchUtils,
} from "react-admin";
import jsonServerProvider from "ra-data-json-server";
import { Task, getTasksByStatus } from "./components/tasks";

const getErrorMessage = (error: any) => {
  if (error.status === 403) {
    return 'У вас нет прав на выполнение этой операции'
  }
  return error.message;
}

const httpClient = async (url: string, options: any = {}) => {
  if (!options.headers) {
    options.headers = new Headers({ Accept: "application/json" });
  }
  const token = localStorage.getItem("token");
  options.headers.set("Authorization", `Bearer ${token}`);
  try{
    const res = await fetchUtils.fetchJson(url, options);
    return res;
  } catch (error) {
    throw new Error(getErrorMessage(error));
  }
};

const baseDataProvider = jsonServerProvider("/api", httpClient);

export interface MyDataProvider extends DataProvider {
  updateTaskStatus: (
    // eslint-disable-next-line no-unused-vars
    source: Task,
    // eslint-disable-next-line no-unused-vars
    destination: { status: Task["status"]; index: number }
  ) => Promise<void>;
}

export const dataProvider: MyDataProvider = {
  ...baseDataProvider,
  updateTaskStatus: async (source, destination) => {
    const { data: unorderedTasks } = await dataProvider.getList<Task>("tasks", {
      sort: { field: "index", order: "ASC" },
      pagination: { page: 1, perPage: 100 },
      filter: {},
    });

    const tasksByStatus = getTasksByStatus(unorderedTasks);

    if (source.status === destination.status) {
      // moving task inside the same column

      const columnTasks = tasksByStatus[source.status];

      if (source.index > destination.index) {
        // task moved up, eg
        // dest   src
        //  <------
        // [4, 7, 23, 5]

        await Promise.all([
          // for all tasks between destination.index and source.index, increase the index
          ...columnTasks
            .filter(
              (task) =>
                task.index >= destination.index && task.index < source.index
            )
            .map((task) =>
              dataProvider.update("tasks", {
                id: task.id,
                data: { index: task.index + 1 },
                previousData: task,
              })
            ),
          // for the task that was moved, update its index
          dataProvider.update("tasks", {
            id: source.id,
            data: { index: destination.index },
            previousData: source,
          }),
        ]);
      } else {
        // task moved down, e.g
        // src   dest
        //  ------>
        // [4, 7, 23, 5]

        await Promise.all([
          // for all tasks between source.index and destination.index, decrease the index
          ...columnTasks
            .filter(
              (task) =>
                task.index <= destination.index && task.index > source.index
            )
            .map((task) =>
              dataProvider.update("tasks", {
                id: task.id,
                data: { index: task.index - 1 },
                previousData: task,
              })
            ),
          // for the task that was moved, update its index
          dataProvider.update("tasks", {
            id: source.id,
            data: { index: destination.index },
            previousData: source,
          }),
        ]);
      }
    } else {
      // moving task across columns

      const sourceColumn = tasksByStatus[source.status];
      const destinationColumn = tasksByStatus[destination.status];

      await Promise.all([
        // decrease index on the tasks after the source index in the source columns
        ...sourceColumn
          .filter((task) => task.index > source.index)
          .map((task) =>
            dataProvider.update("tasks", {
              id: task.id,
              data: { index: task.index - 1 },
              previousData: task,
            })
          ),
        // increase index on the tasks after the destination index in the destination columns
        ...destinationColumn
          .filter((task) => task.index >= destination.index)
          .map((task) =>
            dataProvider.update("tasks", {
              id: task.id,
              data: { index: task.index + 1 },
              previousData: task,
            })
          ),
        // change the dragged task to take the destination index and column
        dataProvider.update("tasks", {
          id: source.id,
          data: {
            index: destination.index,
            status: destination.status,
          },
          previousData: source,
        }),
      ]);
    }
  },
};
