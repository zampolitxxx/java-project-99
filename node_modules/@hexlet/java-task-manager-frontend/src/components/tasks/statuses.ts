import type { Task } from ".";

export const statuses: Task["status"][] = [
  "draft",
  "to_review",
  "to_be_fixed",
  "to_publish",
  "published",
];

export const statusNames: Record<Task["status"], string> = {
  draft: "Draft",
  to_review: "To Review",
  to_be_fixed: "To Be Fixed",
  to_publish: "To Publish",
  published: "Published",
};

export type TasksByStatus = Record<Task["status"], Task[]>;

export const getTasksByStatus = (unorderedTasks: Task[]) => {
  const tasksByStatus: TasksByStatus = unorderedTasks.reduce(
    (acc, task) => {
      if (!acc[task.status]) {
        acc[task.status] = [];
      }
      acc[task.status].push(task);
      return acc;
    }, {} as TasksByStatus);
  // order each column by index
  const statuses = Object.keys(tasksByStatus);
  statuses.forEach((status) => {
    tasksByStatus[status] = tasksByStatus[status].sort(
      (recordA: Task, recordB: Task) => recordA.index - recordB.index
    );
  });
  return tasksByStatus;
};
